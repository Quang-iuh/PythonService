import streamlit as st
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase
import cv2
import pandas as pd

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Qu√©t M√£ QR", layout="wide")

st.title("üì∑ Trang Qu√©t M√£ QR")
st.write("S·ª≠ d·ª•ng camera c·ªßa b·∫°n ƒë·ªÉ qu√©t v√† ph√¢n lo·∫°i m√£ QR.")
if 'logged_in' not in st.session_state or not st.session_state.logged_in:
    st.warning("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi truy c·∫≠p trang n√†y.")
    st.stop()  # NgƒÉn n·ªôi dung ph√≠a d∆∞·ªõi hi·ªÉn th·ªã
# --- Kh·ªüi t·∫°o session state ---
if "qr_history" not in st.session_state:
    st.session_state.qr_history = []
if "last_qr" not in st.session_state:
    st.session_state.last_qr = ""


# --- H√†m ph√¢n lo·∫°i m√£ QR ---
def classify_qr(qr_data: str) -> str:
    if qr_data.startswith("MB-"):
        return "Mi·ªÅn B·∫Øc"
    if qr_data.startswith("MT-"):
        return "Mi·ªÅn Trung"
    if qr_data.startswith("MN-"):
        return "Mi·ªÅn Nam"
    return "Mi·ªÅn kh√°c"


# --- L·ªõp x·ª≠ l√Ω video v·ªõi QRCodeDetector ---
class VideoTransformer(VideoTransformerBase):
    def __init__(self):
        self.detector = cv2.QRCodeDetector()

    def transform(self, frame):
        img = frame.to_ndarray(format="bgr24")

        # Ph√°t hi·ªán v√† gi·∫£i m√£ QR
        data, points, _ = self.detector.detectAndDecode(img)

        if points is not None and data:
            points = points[0].astype(int)
            for j in range(len(points)):
                pt1 = tuple(points[j])
                pt2 = tuple(points[(j + 1) % len(points)])
                cv2.line(img, pt1, pt2, (0, 255, 0), 2)

            # N·∫øu l√† m√£ QR m·ªõi th√¨ l∆∞u
            if data != st.session_state.last_qr:
                qr_region = classify_qr(data)
                qr_entry = {
                    "data": data,
                    "type": "QRCODE",
                    "time": pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "region": qr_region,
                }
                st.session_state.qr_history.append(qr_entry)
                st.session_state.last_qr = data

            cv2.putText(img, data, (points[0][0], points[0][1] - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

        return img


# --- Kh·ªüi ch·∫°y camera ---
webrtc_streamer(
    key="camera",
    video_processor_factory=VideoTransformer,   # thay v√¨ video_transformer_factory
    media_stream_constraints={"video": True, "audio": False},
)

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
if st.session_state.last_qr:
    st.info(f"‚úÖ ƒê√£ qu√©t th√†nh c√¥ngrun m√£ QR: **{st.session_state.last_qr}**")

if st.session_state.qr_history:
    df = pd.DataFrame(st.session_state.qr_history)
    st.subheader("üìú L·ªãch s·ª≠ qu√©t")
    st.dataframe(df, use_container_width=True)
st.sidebar.title(f"Ch√†o {st.session_state.username}")
if st.sidebar.button("üîí ƒêƒÉng xu·∫•t"):
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.experimental_rerun()