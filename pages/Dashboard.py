import streamlit as st
import pandas as pd
import plotly.express as px
from utils.qr_storage import load_qr_data  # Import h√†m load d·ªØ li·ªáu t·ª´ file JSON

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="üìä Th·ªëng k√™ & B√°o c√°o",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- CSS t√πy ch·ªânh ---
st.markdown("""    
<style>    
    .main-header {    
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);    
        padding: 1.5rem;    
        border-radius: 10px;    
        color: white;    
        text-align: center;    
        margin-bottom: 2rem;    
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);    
    }    

    .metric-card {    
        background: #ffffff;    
        border: 1px solid #e1e5e9;    
        border-radius: 10px;    
        padding: 1.5rem;    
        margin: 0.5rem 0;    
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);    
        text-align: center;    
    }    

    .metric-value {    
        font-size: 2.5rem;    
        font-weight: bold;    
        color: #2c3e50;    
        margin-bottom: 0.5rem;    
    }    

    .metric-label {    
        color: #6c757d;    
        font-size: 1rem;    
    }    

    .chart-container {    
        background: #ffffff;    
        border: 1px solid #e1e5e9;    
        border-radius: 10px;    
        padding: 1.5rem;    
        margin: 1rem 0;    
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);    
    }    

    .data-table {    
        border: 1px solid #dee2e6;    
        border-radius: 8px;    
        overflow: hidden;    
    }    

    .sidebar-section {    
        background: #f8f9fa;    
        padding: 1rem;    
        border-radius: 8px;    
        margin: 1rem 0;    
        border-left: 4px solid #667eea;    
    }    
</style>    
""", unsafe_allow_html=True)

# --- Header ch√≠nh ---
st.markdown("""    
<div class="main-header">    
    <h1>üìä TH·ªêNG K√ä & B√ÅO C√ÅO</h1>    
    <p>Ph√¢n t√≠ch d·ªØ li·ªáu qu√©t m√£ QR theo th·ªùi gian th·ª±c</p>    
</div>    
""", unsafe_allow_html=True)

# --- Ki·ªÉm tra ƒëƒÉng nh·∫≠p ---
if 'logged_in' not in st.session_state or not st.session_state.logged_in:
    st.error("üîí Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi truy c·∫≠p trang n√†y.")
    st.stop()

# --- Load d·ªØ li·ªáu t·ª´ file JSON ---
try:
    qr_history = load_qr_data()  # Thay th·∫ø st.session_state.qr_history
except Exception as e:
    st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
    qr_history = []

# --- T√≠nh to√°n th·ªëng k√™ ---
total_scans = len(qr_history)

# T√°ch d·ªØ li·ªáu theo mi·ªÅn
unique_north = {item["data"] for item in qr_history if item["region"] == "Mi·ªÅn B·∫Øc"}
unique_central = {item["data"] for item in qr_history if item["region"] == "Mi·ªÅn Trung"}
unique_south = {item["data"] for item in qr_history if item["region"] == "Mi·ªÅn Nam"}
unique_other = {item["data"] for item in qr_history if item["region"] == "Mi·ªÅn kh√°c"}

unique_scans = len(unique_north | unique_central | unique_south | unique_other)

# --- Metrics Dashboard ---
st.markdown("## üìà T·ªïng quan th·ªëng k√™")

col1, col2, col3, col4, col5 = st.columns(5)

with col1:
    st.markdown(f"""    
    <div class="metric-card">    
        <div class="metric-value">{total_scans}</div>    
        <div class="metric-label">T·ªïng s·ªë qu√©t</div>    
    </div>    
    """, unsafe_allow_html=True)

with col2:
    st.markdown(f"""    
    <div class="metric-card">    
        <div class="metric-value">{unique_scans}</div>    
        <div class="metric-label">M√£ duy nh·∫•t</div>    
    </div>    
    """, unsafe_allow_html=True)

with col3:
    st.markdown(f"""    
    <div class="metric-card">    
        <div class="metric-value">{len(unique_north)}</div>    
        <div class="metric-label">Mi·ªÅn B·∫Øc</div>    
    </div>    
    """, unsafe_allow_html=True)

with col4:
    st.markdown(f"""    
    <div class="metric-card">    
        <div class="metric-value">{len(unique_central)}</div>    
        <div class="metric-label">Mi·ªÅn Trung</div>    
    </div>    
    """, unsafe_allow_html=True)

with col5:
    st.markdown(f"""    
    <div class="metric-card">    
        <div class="metric-value">{len(unique_south)}</div>    
        <div class="metric-label">Mi·ªÅn Nam</div>    
    </div>    
    """, unsafe_allow_html=True)

# --- Layout 2 c·ªôt cho bi·ªÉu ƒë·ªì ---
if qr_history:  # Thay ƒë·ªïi t·ª´ st.session_state.qr_history
    col_chart1, col_chart2 = st.columns(2)

    with col_chart1:
        st.markdown("""    
        <div class="chart-container">    
            <h3>üìä Ph√¢n b·ªë theo mi·ªÅn</h3>    
        </div>    
        """, unsafe_allow_html=True)

        # Pie chart
        chart_data = {
            'Mi·ªÅn': ['Mi·ªÅn B·∫Øc', 'Mi·ªÅn Trung', 'Mi·ªÅn Nam', 'Mi·ªÅn kh√°c'],
            'S·ªë l∆∞·ª£ng': [len(unique_north), len(unique_central), len(unique_south), len(unique_other)]
        }
        df_chart = pd.DataFrame(chart_data)
        df_chart = df_chart[df_chart['S·ªë l∆∞·ª£ng'] > 0]

        if not df_chart.empty:
            fig_pie = px.pie(df_chart, values='S·ªë l∆∞·ª£ng', names='Mi·ªÅn',
                             color_discrete_sequence=['#667eea', '#764ba2', '#f093fb', '#f5576c'])
            fig_pie.update_layout(height=400)
            st.plotly_chart(fig_pie, use_container_width=True)

    with col_chart2:
        st.markdown("""    
        <div class="chart-container">    
            <h3>üìà Bi·ªÉu ƒë·ªì c·ªôt</h3>    
        </div>    
        """, unsafe_allow_html=True)

        # Bar chart
        if not df_chart.empty:
            fig_bar = px.bar(df_chart, x='Mi·ªÅn', y='S·ªë l∆∞·ª£ng',
                             color='Mi·ªÅn',
                             color_discrete_sequence=['#667eea', '#764ba2', '#f093fb', '#f5576c'])
            fig_bar.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig_bar, use_container_width=True)

            # --- B·∫£ng d·ªØ li·ªáu chi ti·∫øt ---
    st.markdown("## üìã L·ªãch s·ª≠ qu√©t chi ti·∫øt")

    df = pd.DataFrame(qr_history)  # Thay ƒë·ªïi t·ª´ st.session_state.qr_history

    # Filters
    col_filter1, col_filter2 = st.columns(2)

    with col_filter1:
        region_filter = st.selectbox(
            "L·ªçc theo mi·ªÅn:",
            ["T·∫•t c·∫£"] + list(df['region'].unique()) if not df.empty else ["T·∫•t c·∫£"]
        )

    with col_filter2:
        if not df.empty:
            date_filter = st.date_input("L·ªçc theo ng√†y:", value=None)

            # Apply filters
    filtered_df = df.copy()
    if region_filter != "T·∫•t c·∫£" and not df.empty:
        filtered_df = filtered_df[filtered_df['region'] == region_filter]

        # Display table
    if not filtered_df.empty:
        st.markdown('<div class="data-table">', unsafe_allow_html=True)
        st.dataframe(
            filtered_df[['data', 'region', 'time']],
            use_container_width=True,
            hide_index=True
        )
        st.markdown('</div>', unsafe_allow_html=True)

        # Download button
        csv = filtered_df.to_csv(index=False)
        st.download_button(
            label="üì• T·∫£i xu·ªëng CSV",
            data=csv,
            file_name=f"qr_data_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
    else:
        st.info("üîç Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c qu√©t. Vui l√≤ng tr·ªü v·ªÅ trang Camera ƒë·ªÉ qu√©t m√£.")

else:
    st.info("üîç Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c qu√©t. Vui l√≤ng tr·ªü v·ªÅ trang Camera ƒë·ªÉ qu√©t m√£.")

# --- Sidebar ---
with st.sidebar:
    st.markdown(f"""    
    <div class="sidebar-section">    
        <h3>üë§ Ng∆∞·ªùi d√πng</h3>    
        <p>Xin ch√†o, <strong>{st.session_state.username}</strong></p>    
    </div>    
    """, unsafe_allow_html=True)

    st.markdown("""    
    <div class="sidebar-section">    
        <h3>üìä Th·ªëng k√™ nhanh</h3>    
    </div>    
    """, unsafe_allow_html=True)

    if qr_history:  # Thay ƒë·ªïi t·ª´ st.session_state.qr_history
        st.metric("T·ªïng qu√©t", total_scans)
        st.metric("M√£ duy nh·∫•t", unique_scans)

        # T·ª∑ l·ªá ph·∫ßn trƒÉm
        if total_scans > 0:
            north_pct = round(len(unique_north) / unique_scans * 100, 1) if unique_scans > 0 else 0
            central_pct = round(len(unique_central) / unique_scans * 100, 1) if unique_scans > 0 else 0
            south_pct = round(len(unique_south) / unique_scans * 100, 1) if unique_scans > 0 else 0

            st.write("**T·ª∑ l·ªá theo mi·ªÅn:**")
            st.write(f"üîµ Mi·ªÅn B·∫Øc: {north_pct}%")
            st.write(f"üü° Mi·ªÅn Trung: {central_pct}%")
            st.write(f"üî¥ Mi·ªÅn Nam: {south_pct}%")

    st.markdown("---")

    if st.button("üîí ƒêƒÉng xu·∫•t", use_container_width=True):
        st.session_state.logged_in = False
        st.session_state.username = ""
        st.switch_page("pages/login.py")